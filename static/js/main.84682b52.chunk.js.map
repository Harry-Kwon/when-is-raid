{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","urlTimeParam","URLSearchParams","window","location","search","get","utcTimeString","useState","moment","raidTime","setRaidTime","isValid","startOf","clone","add","timeRemaining","fromNow","startTime","local","format","React","openSnackbar","setOpenSnackbar","className","id","LocalizationProvider","dateAdapter","AdapterMoment","DateTimePicker","label","value","onChange","newTime","utc","newUrl","href","split","time","dateFormat","timeFormat","generateUrlTimeString","history","pushState","renderInput","params","TextField","variant","fullWidth","size","inputProps","readOnly","InputLabelProps","shrink","Button","disableElevation","onClick","navigator","clipboard","writeText","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","message","action","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PA8HeA,MAjHf,WAGE,IACIC,EADiB,IAAIC,gBAAgBC,OAAOC,SAASC,QACzBC,IAAI,YAChCC,EAAa,UAAMN,EAAN,OACE,MAAhBA,IACDM,EAAgB,kBAPL,MAWmBC,mBAASC,IAAOF,IAXnC,mBAWNG,EAXM,KAWIC,EAXJ,KAcTD,EAASE,WAEXD,EAAYF,MAASI,QAAQ,OAAOC,QAAQC,IAAI,GAAI,UAItD,IAAIC,EAAgBN,EAASO,UACzBC,EAAYR,EAASS,QAAQC,OAAO,wBArB3B,EAwB2BC,IAAMb,UAAS,GAxB1C,mBAwBNc,EAxBM,KAwBQC,EAxBR,KA0Bb,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,gCACE,8CAAiBR,KACjB,qCAAQE,KAER,qBAAKO,GAAG,oBAAR,SACE,cAACC,EAAA,EAAD,CAAsBC,YAAaC,IAAnC,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,iBACNC,MAAOrB,EACPsB,SAAU,SAACC,GAET,GAAGA,EAAQrB,UAAW,CACpBD,EAAYsB,EAAQC,OACpB,IAAIC,EAAM,UAAMhC,OAAOC,SAASgC,KAAKC,MAAM,KAAK,GAAtC,qBA4D9B,SAA+BC,GAC7B,IAAIA,EAAK1B,UACP,MAAO,GAET,IAAI2B,EAAaD,EAAKJ,MAAMd,OAAO,YAC/BoB,EAAaF,EAAKJ,MAAMd,OAAO,UAGnC,MAFoB,UAAMmB,EAAN,YAAoBC,GAlEyCC,CAAsBR,IACrF9B,OAAOuC,QAAQC,UAAU,GAAI,QAASR,KAG1CS,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,eAAeD,WAK9C,sBAAKpB,GAAG,YAAR,UACE,cAACqB,EAAA,EAAD,CACErB,GAAG,iBACHK,MAAM,aACNiB,QAAQ,WACRC,WAAW,EACXC,KAAK,QACLC,WACE,CAACC,UAAU,GAEbC,gBACE,CAACC,QAAQ,GAEXtB,MAAO5B,OAAOC,SAASgC,OAGzB,cAACkB,EAAA,EAAD,CACEP,QAAQ,WACRE,KAAK,QACLM,kBAAgB,EAChBC,QAAS,WACPC,UAAUC,UAAUC,UAAUxD,OAAOC,SAASgC,MAC9Cb,GAAgB,IANpB,wBAeJ,cAACqC,EAAA,EAAD,CACEC,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdC,KAAM1C,EACN2C,iBAAkB,IAClBC,QAAS,WAAK3C,GAAgB,IAC9B4C,QAAQ,4BACRC,OACE,cAAC,IAAMC,SAAP,YC7FGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.84682b52.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport { useState } from 'react';\n\nimport moment from 'moment';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport AdapterMoment from '@material-ui/lab/AdapterMoment';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\nimport DateTimePicker from '@material-ui/lab/DateTimePicker';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nfunction App() {\n\n  // check the url for a utc timestamp\n  const searchParams = new URLSearchParams(window.location.search);\n  let urlTimeParam = searchParams.get('raidTime');\n  let utcTimeString = `${urlTimeParam}+00`\n  if(urlTimeParam == null) {\n    utcTimeString = \"invalidutctime\";\n  }\n\n  // create a time object from the url timestamp\n  const [raidTime, setRaidTime] = useState(moment(utcTimeString));\n\n  // if the url timestamp is invalid, set the time to 8pm today\n  if(!raidTime.isValid()) {\n    // placeholder for invalid raid time\n    setRaidTime(moment().startOf('day').clone().add(20, 'hours'));\n  }\n\n  // create formatted time strings\n  let timeRemaining = raidTime.fromNow();\n  let startTime = raidTime.local().format('MMMM Do YYYY, h:mm a')\n\n  // snackbar handling\n  const [openSnackbar, setOpenSnackbar] = React.useState(false);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <h1>Raid starts {timeRemaining}</h1>\n          <h2>On {startTime}</h2> \n\n          <div id=\"datetime-selector\">\n            <LocalizationProvider dateAdapter={AdapterMoment}>\n              <DateTimePicker\n                label=\"Set a new time\"\n                value={raidTime}\n                onChange={(newTime) => {\n                  // change the url\n                  if(newTime.isValid()) {\n                    setRaidTime(newTime.utc());\n                    let newUrl = `${window.location.href.split('?')[0]}?raidTime=${generateUrlTimeString(newTime)}`\n                    window.history.pushState({}, 'title', newUrl);\n                  }\n                }}\n                renderInput={(params) => <TextField {...params}/>}\n              />\n            </LocalizationProvider>\n          </div>\n\n          <div id=\"sharelink\">\n            <TextField\n              id=\"sharelink-text\"\n              label=\"Share Link\"\n              variant=\"standard\"\n              fullWidth={true}\n              size=\"small\"\n              inputProps={\n                {readOnly: true,}\n              }\n              InputLabelProps={\n                {shrink: true}\n              }\n              value={window.location.href}\n            ></TextField>\n\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              disableElevation\n              onClick={() => {\n                navigator.clipboard.writeText(window.location.href);\n                setOpenSnackbar(true);\n              }\n              }\n            >\n              Copy\n            </Button>\n          </div>\n        </div>\n\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={openSnackbar}\n          autoHideDuration={3000}\n          onClose={()=>{setOpenSnackbar(false)}}\n          message=\"Link copied to clipboard!\"\n          action={\n            <React.Fragment>\n            </React.Fragment>\n          }\n        />\n\n      </header>\n    </div>\n  );\n}\n\nfunction generateUrlTimeString(time) {\n  if(!time.isValid()) {\n    return '';\n  }\n  let dateFormat = time.utc().format('YYYYMMDD')\n  let timeFormat = time.utc().format('HHmmss')\n  let urlUTCTimeFormat = `${dateFormat}T${timeFormat}`;\n\n  return urlUTCTimeFormat;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}