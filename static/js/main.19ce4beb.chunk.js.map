{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","urlTimeParam","URLSearchParams","window","location","search","get","utcTimeString","useState","moment","raidTime","setRaidTime","isValid","startOf","clone","add","timeRemaining","fromNow","startTime","local","format","className","LocalizationProvider","dateAdapter","AdapterMoment","DateTimePicker","label","value","onChange","newTime","utc","newUrl","href","split","time","dateFormat","timeFormat","generateUrlTimeString","history","pushState","renderInput","params","TextField","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAyEeA,MA/Df,WAGE,IACIC,EADiB,IAAIC,gBAAgBC,OAAOC,SAASC,QACzBC,IAAI,YAChCC,EAAa,UAAMN,EAAN,OACE,MAAhBA,IACDM,EAAgB,kBAPL,MAWmBC,mBAASC,IAAOF,IAXnC,mBAWNG,EAXM,KAWIC,EAXJ,KAcTD,EAASE,WAEXD,EAAYF,MAASI,QAAQ,OAAOC,QAAQC,IAAI,GAAI,UAItD,IAAIC,EAAgBN,EAASO,UACzBC,EAAYR,EAASS,QAAQC,OAAO,wBAExC,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,gCACE,8CAAiBL,KACjB,qCAAQE,QAGV,cAACI,EAAA,EAAD,CAAsBC,YAAaC,IAAnC,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,iBACNC,MAAOjB,EACPkB,SAAU,SAACC,GAET,GAAGA,EAAQjB,UAAW,CACpBD,EAAYkB,EAAQC,OACpB,IAAIC,EAAM,UAAM5B,OAAOC,SAAS4B,KAAKC,MAAM,KAAK,GAAtC,qBAa1B,SAA+BC,GAC7B,IAAIA,EAAKtB,UACP,MAAO,GAET,IAAIuB,EAAaD,EAAKJ,MAAMV,OAAO,YAC/BgB,EAAaF,EAAKJ,MAAMV,OAAO,UAGnC,MAFoB,UAAMe,EAAN,YAAoBC,GAnBqCC,CAAsBR,IACrF1B,OAAOmC,QAAQC,UAAU,GAAI,QAASR,KAG1CS,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,eAAeD,eCzCrCE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.19ce4beb.chunk.js","sourcesContent":["import './App.css';\n\nimport { useState } from 'react';\n\nimport moment from 'moment';\nimport TextField from '@material-ui/core/TextField';\nimport AdapterMoment from '@material-ui/lab/AdapterMoment';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\nimport { DateTimePicker } from '@material-ui/lab';\n\nfunction App() {\n\n  // check the url for a utc timestamp\n  const searchParams = new URLSearchParams(window.location.search);\n  let urlTimeParam = searchParams.get('raidTime');\n  let utcTimeString = `${urlTimeParam}+00`\n  if(urlTimeParam == null) {\n    utcTimeString = \"invalidutctime\";\n  }\n\n  // create a time object from the url timestamp\n  const [raidTime, setRaidTime] = useState(moment(utcTimeString));\n\n  // if the url timestamp is invalid, set the time to 8pm today\n  if(!raidTime.isValid()) {\n    // placeholder for invalid raid time\n    setRaidTime(moment().startOf('day').clone().add(20, 'hours'));\n  }\n\n  // create formatted time strings\n  let timeRemaining = raidTime.fromNow();\n  let startTime = raidTime.local().format('MMMM Do YYYY, h:mm a')\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <h1>Raid starts {timeRemaining}</h1>\n          <h2>On {startTime}</h2> \n        </div>\n\n        <LocalizationProvider dateAdapter={AdapterMoment}>\n          <DateTimePicker\n            label=\"Set a new time\"\n            value={raidTime}\n            onChange={(newTime) => {\n              // change the url\n              if(newTime.isValid()) {\n                setRaidTime(newTime.utc());\n                let newUrl = `${window.location.href.split('?')[0]}?raidTime=${generateUrlTimeString(newTime)}`\n                window.history.pushState({}, 'title', newUrl);\n              }\n            }}\n            renderInput={(params) => <TextField {...params}/>}\n          />\n        </LocalizationProvider>\n\n      </header>\n    </div>\n  );\n}\n\nfunction generateUrlTimeString(time) {\n  if(!time.isValid()) {\n    return '';\n  }\n  let dateFormat = time.utc().format('YYYYMMDD')\n  let timeFormat = time.utc().format('HHmmss')\n  let urlUTCTimeFormat = `${dateFormat}T${timeFormat}`;\n\n  return urlUTCTimeFormat;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}